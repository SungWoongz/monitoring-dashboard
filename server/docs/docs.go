// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/cpu": {
            "get": {
                "description": "Retrieves CPU status data based on the specified interval and limit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CPU"
                ],
                "summary": "Get CPU Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Interval in seconds (default: 1)",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of records to fetch (default: 30)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "description": "Retrieves information about the server, including hostname, OS, uptime, platform, and virtualization details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "summary": "Get Server Information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    }
                }
            }
        },
        "/mem": {
            "get": {
                "description": "Retrieves memory status data based on the specified interval and limit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Memory"
                ],
                "summary": "Get Memory Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Interval in seconds (default: 1)",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of records to fetch (default: 30)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    }
                }
            }
        },
        "/net": {
            "get": {
                "description": "Retrieves network status data based on the specified interval and limit.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Network"
                ],
                "summary": "Get Network Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Interval in seconds (default: 1)",
                        "name": "interval",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Number of records to fetch (default: 30)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.HttpResponse"
                        }
                    }
                }
            }
        },
        "/ws": {
            "get": {
                "description": "Handles WebSocket connections and streams system status updates (CPU, Memory, Network) every second.",
                "tags": [
                    "WebSocket"
                ],
                "summary": "WebSocket Endpoint",
                "responses": {
                    "200": {
                        "description": "System status updates are sent via WebSocket.",
                        "schema": {
                            "$ref": "#/definitions/models.ALL_Status"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ALL_Status": {
            "type": "object",
            "properties": {
                "cpu": {
                    "$ref": "#/definitions/models.CPU_Status"
                },
                "mem": {
                    "$ref": "#/definitions/models.MEM_Status"
                },
                "net": {
                    "$ref": "#/definitions/models.NET_Status"
                }
            }
        },
        "models.CPU_Status": {
            "type": "object",
            "properties": {
                "Usage": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.HttpResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "status": {
                    "$ref": "#/definitions/models.HttpStatus"
                }
            }
        },
        "models.HttpStatus": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "message": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "models.MEM_Status": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "NULL 불가",
                    "type": "integer"
                },
                "timestamp": {
                    "description": "기본 키 및 자동 생성 시간",
                    "type": "string"
                },
                "total": {
                    "description": "NULL 불가",
                    "type": "integer"
                },
                "used": {
                    "description": "NULL 불가",
                    "type": "integer"
                },
                "usedPercent": {
                    "description": "소수점 2자리 제한",
                    "type": "number"
                }
            }
        },
        "models.NET_Status": {
            "type": "object",
            "properties": {
                "bytesRecv": {
                    "description": "number of bytes received",
                    "type": "integer"
                },
                "bytesSent": {
                    "description": "number of bytes sent",
                    "type": "integer"
                },
                "dropin": {
                    "description": "total number of incoming packets which were dropped",
                    "type": "integer"
                },
                "dropout": {
                    "description": "total number of outgoing packets which were dropped",
                    "type": "integer"
                },
                "errin": {
                    "description": "total number of errors while receiving",
                    "type": "integer"
                },
                "errout": {
                    "description": "total number of errors while sending",
                    "type": "integer"
                },
                "fifoin": {
                    "description": "total number of FIFO buffers errors while receiving",
                    "type": "integer"
                },
                "fifoout": {
                    "description": "total number of FIFO buffers errors while sending",
                    "type": "integer"
                },
                "packetsRecv": {
                    "description": "number of packets received",
                    "type": "integer"
                },
                "packetsSent": {
                    "description": "number of packets sent",
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "MonDash API",
	Description:      "MonDash API SERVER Swagger",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
